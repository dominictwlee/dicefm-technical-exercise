import { Box, Grid, Center, Heading, GridItem, Button } from "@chakra-ui/react";
import { getEvents } from "../modules/event/api";
import { DiceEvent, GetDiceEventsResponse } from "@/modules/event/types";
import { useInfiniteQuery } from "@tanstack/react-query";
import type { NextPage } from "next";
import Head from "next/head";
import { useEffect, useRef, useState } from "react";
import EventCard from "@/modules/event/EventCard";
import EventSearchBar from "@/modules/event/EventSearchBar";
import { capitalizeAllWords } from "@/common/utils/capitalize";

const EventListHome: NextPage = () => {
  const [searchTerms, setSearchTerms] = useState("");
  const { data, error, fetchNextPage, hasNextPage, isFetching, isFetchingNextPage, status } =
    useInfiniteQuery(
      ["events", { searchTerms }],
      ({ pageParam = 1 }) =>
        getEvents({ filter: { venue: searchTerms }, page: { number: pageParam } }),
      {
        getNextPageParam: (lastPage) => {
          if (lastPage.links.next) {
            return new URL(lastPage.links.next).searchParams.get("page[number]");
          }
        },
      }
    );
  const audioPlayerRef = useRef<HTMLAudioElement | null>(null);
  const [isAudioPlaying, setIsAudioPlaying] = useState(false);

  useEffect(() => {
    if (audioPlayerRef.current === null) {
      audioPlayerRef.current = new Audio();
    }
  }, []);

  useEffect(() => {
    function handlePlay() {
      setIsAudioPlaying(true);
    }
    function handlePause() {
      setIsAudioPlaying(false);
    }
    const playListener = audioPlayerRef.current?.addEventListener("play", handlePlay);
    const pauseListener = audioPlayerRef.current?.addEventListener("pause", handlePause);

    () => {
      audioPlayerRef.current?.removeEventListener("play", handlePlay);
      audioPlayerRef.current?.removeEventListener("pause", handlePause);
    };
  }, []);

  const hasNoResults = data?.pages.length === 1 && data.pages[0]?.data.length === 0;

  const onSearchSubmit = (value: string) => {
    setSearchTerms(capitalizeAllWords(value));
  };

  return (
    <Box py={8} minH="100vh">
      <Head>
        <title>DICE Events</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Box px={20} mb={20}>
        <EventSearchBar status={status} onSubmit={onSearchSubmit} />
      </Box>

      <Box as="main">
        <Center>
          <Grid
            templateColumns={{
              base: "1fr",
              md: "repeat(2, 1fr)",
              lg: "repeat(3, 1fr)",
              "2xl": "repeat(4, 1fr)",
            }}
            gap={8}
            justifyItems="center"
          >
            <GridItem
              justifySelf="start"
              colSpan={{
                base: 1,
                md: 2,
                lg: 3,
                "2xl": 4,
              }}
            >
              {hasNoResults || error ? (
                <Heading variant="title2" as="h1" textAlign="start">
                  {"Sorry...we couldn't find anything"}
                </Heading>
              ) : status === "loading" ? null : (
                <Heading variant="title2" as="h1" textAlign="start">
                  Upcoming events {searchTerms ? `at ${searchTerms}` : null}
                </Heading>
              )}
            </GridItem>

            {hasNoResults || error ? (
              <EmptyGridItems />
            ) : (
              data?.pages.map((response) => {
                return response.data.map((event) => {
                  const audioSource = findAudioSource(event);
                  const isPlayingTrack = !!(
                    isAudioPlaying &&
                    audioPlayerRef.current?.src &&
                    audioPlayerRef.current.src === audioSource
                  );
                  const isPlayingAnotherTrack = !!(
                    isAudioPlaying &&
                    audioPlayerRef.current?.src &&
                    audioPlayerRef.current.src !== audioSource
                  );
                  return (
                    <GridItem key={event.id} data-testid={`event_${event.id}`}>
                      <EventCard
                        saleStartDate={event.sale_start_date}
                        eventImages={event.event_images}
                        date={event.date}
                        name={event.name}
                        location={event.location}
                        description={event.description}
                        lineup={event.lineup}
                        ticketTypes={event.ticket_types}
                        currency={event.currency}
                        isFeatured={event.featured}
                        venue={event.venue}
                        isPlaying={isPlayingTrack}
                        audioSrc={audioSource}
                        onPlayClick={() => {
                          if (!audioPlayerRef.current) {
                            return;
                          }

                          if (isPlayingTrack) {
                            audioPlayerRef.current.pause();
                          } else if (isPlayingAnotherTrack) {
                            audioPlayerRef.current.pause();
                            setIsAudioPlaying(false);
                            audioPlayerRef.current.src = audioSource!;
                            audioPlayerRef.current.load();
                            audioPlayerRef.current.play();
                          } else {
                            audioPlayerRef.current.src = audioSource!;
                            audioPlayerRef.current.load();
                            audioPlayerRef.current.play();
                          }
                        }}
                      />
                    </GridItem>
                  );
                });
              })
            )}
            {hasNextPage && (
              <GridItem
                justifySelf="start"
                colSpan={{
                  base: 1,
                  md: 2,
                  lg: 3,
                  "2xl": 4,
                }}
              >
                <Button
                  onClick={() => fetchNextPage()}
                  variant="outline"
                  colorScheme="primary"
                  isLoading={isFetchingNextPage}
                  borderRadius="full"
                  size="lg"
                >
                  Load More
                </Button>
              </GridItem>
            )}
          </Grid>
        </Center>
      </Box>
    </Box>
  );
};

function EmptyGridItems() {
  return (
    <>
      {new Array(4).fill(null).map((_, index) => (
        <GridItem key={`gridFiller-${index}`}>
          <Box minW="320px" minH="1px" />
        </GridItem>
      ))}
    </>
  );
}

function findAudioSource({ spotify_tracks, apple_music_tracks }: DiceEvent): string | null {
  return spotify_tracks[0]?.preview_url ?? apple_music_tracks[0]?.preview_url ?? null;
}

export default EventListHome;
